##########################################
# 也可以直接用这个流水线运行 app
##########################################

# 这个名称会展示在 github action 上
# 文件名由于被其他流水线引用，所以不要轻易改动
name: 21. 🚚 运行应用

on:
  # 手动触发
  # [支持的变量类型](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputsinput_idtype)
  # workflow_dispatch 才支持 environment 类型的变量
  workflow_dispatch:
    inputs:
      ENV_PUBLISH_PLATFORMS:
        type: string
        description: "选择发布平台，用 ',' 分割（不带空格，可选项: douyin,weixin,xiaohongshu）"
        required: false
        default: "douyin"

      APP:
        description: "mypy/apps 下的应用名称"
        required: true
        type: string
        default: "test_app"

      ARGS:
        description: "应用参数"
        type: string
        required: false

      DEPENDENT_BINARY:
        description: "依赖的二进制程序"
        type: string
        required: false
        default: "ffmpeg libreoffice poppler-utils wkhtmltopdf"

      SIMPLE_RUN:
        description: "是否简单运行（不安装程序依赖和字体，也不安装 mypy）"
        type: boolean
        required: false
        default: false

      COMMIT_CHANGE:
        description: "是否提交更改"
        type: boolean
        required: false
        default: true

      WITH_3PARTY:
        description: "是否安装 3party 下的服务"
        type: boolean
        required: false
        default: false

      DEBUG:
        description: "支持连接到虚拟机进行调试"
        type: boolean
        required: false
        default: false

      REF:
        description: "Python 仓库分支或标签、提交ID"
        type: string
        required: false
        default: master

  # 流水线调用
  # [支持的变量类型](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputsinput_idtype)
  workflow_call:
    inputs:
      APP:
        description: "mypy/apps 下的应用名称"
        required: true
        type: string

      ENV_BAIDU_AIGC_TYPE:
        type: string
        description: "AI 生成内容类型"
        required: false
        default: "PPT"

      ENV_BAIDU_AIGC_TOPIC:
        type: string
        description: "发布内容的主题"
        required: false
        default: ""

      ENV_PUBLISH_MEDIA_TYPE:
        type: string
        # 定义在 const.py/MEDIA_TYPE_IMG_ARTICLE
        description: "发布媒体类型"
        required: false
        default: "video"

      # 设置到环境变量
      ENV_PUBLISH_PLATFORMS:
        type: string
        description: "选择发布平台，用 ',' 分割（不带空格，可选项: douyin,weixin,xiaohongshu）"
        required: false
        default: "douyin"

      ENV_PUBLISH_MOD:
        type: string
        description: "选择发布时间模式"
        required: false
        default: "timing"

      ENV_PUBLISH_ACCOUNT:
        type: string
        description: "选择账号（可选: large 大号, middle 中号, test 测试账号）"
        required: false
        default: "large"

      ARGS:
        description: "应用参数"
        type: string
        required: false

      SIMPLE_RUN:
        description: "是否简单运行（不安装程序依赖和字体，也不安装 mypy）"
        type: boolean
        required: false
        default: false

      DEPENDENT_BINARY:
        description: "依赖的二进制程序"
        type: string
        required: false
        default: "ffmpeg libreoffice poppler-utils wkhtmltopdf"

      FORCE_COMMIT:
        description: "不管是否运行成功，都提交改动的信息"
        type: boolean
        required: false
        default: false

      COMMIT_CHANGE:
        description: "是否提交更改"
        type: boolean
        required: false
        default: true

      WITH_3PARTY:
        description: "是否安装 3party 下的服务"
        type: boolean
        required: false
        default: true

      DEBUG:
        description: "支持连接到虚拟机进行调试"
        type: boolean
        required: false
        default: false

      REF:
        description: "Python 仓库分支或标签、提交ID"
        type: string
        required: false
        default: master

    # 外部调用的时候提供 token 用来拉取本私有仓库
    secrets:
      MYPY_ACCESS_TOKEN:
        required: false

# env 上下文只能在 run 步骤中使用
env:
  APP_BASE_PATH: mypy/mypy/apps
  APP_ENTRY: main.py
  FONT_DIR: mypy/mypy/assets/font
  # 环境变量
  ENV_INIT_SCRIPT: mypy/env_init.sh
  ENV_IN_GITHUBACTION: true
  ENV_PUBLISH_MOD: ${{ github.event.inputs.ENV_PUBLISH_MOD }}
  ENV_PUBLISH_PLATFORMS: ${{ github.event.inputs.ENV_PUBLISH_PLATFORMS }}
  ENV_PUBLISH_ACCOUNT: ${{ github.event.inputs.ENV_PUBLISH_ACCOUNT }}
  ENV_PUBLISH_MEDIA_TYPE: ${{ github.event.inputs.ENV_PUBLISH_MEDIA_TYPE }}
  ENV_BAIDU_AIGC_TYPE: ${{ github.event.inputs.ENV_BAIDU_AIGC_TYPE }}
  ENV_BAIDU_AIGC_TOPIC: ${{ github.event.inputs.ENV_BAIDU_AIGC_TOPIC }}

jobs:
  run:
    name: 🔴🟡🟢 运行 🟢🟡🔴
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # uses 之后不能再用 run
        uses: actions/checkout@v4
        # 访问仓库用到的 Personal access token
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python
          ref: ${{ inputs.REF || 'master' }}

      - name: 设置时区
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      # [关于 setup-python 缓存时没有把二进制一起缓存下来的问题](https://github.com/actions/setup-python/issues/330)
      - name: 缓存 pip 依赖
        uses: actions/cache@v4.2.2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('mypy/requirements.txt') }}

      - name: 缓存 apt 包
        if: ${{ ! inputs.SIMPLE_RUN }}
        continue-on-error: true
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ${{ inputs.DEPENDENT_BINARY }} # 要安装的软件包的空格分隔列表
          version: 1.0 # 要加载的缓存版本

      - name: 安装依赖程序
        uses: ConorMacBride/install-package@v1.1.0
        if: ${{ ! inputs.SIMPLE_RUN && steps.cache.outputs.cache-hit != 'true' }}
        with:
          apt: ${{ inputs.DEPENDENT_BINARY }}
          choco: ${{ inputs.DEPENDENT_BINARY }}

      - name: 安装字体
        if: ${{ ! inputs.SIMPLE_RUN }}
        run: |
          bash mypy/mypy/build/install_font.sh ${{ env.FONT_DIR }}

      - name: 初始化运行环境
        if: ${{ ! inputs.SIMPLE_RUN }}
        run: |
          bash ${{ env.ENV_INIT_SCRIPT }}

      - name: 安装第三方服务
        if: ${{ inputs.WITH_3PARTY && ! inputs.SIMPLE_RUN }}
        continue-on-error: true
        run: |
          bash mypy/mypy/3party/init.sh

      - name: 调试
        if: ${{ inputs.DEBUG }}
        uses: wordsworth-mk/action-debug@main
        with:
          credentials: "user:password"

      - name: 🔴🟡🟢 运行 🟢🟡🔴
        run: |
          cd ${{ env.APP_BASE_PATH }}/${{ inputs.APP }}
          python ${{ env.APP_ENTRY }} ${{ inputs.ARGS }}

      - name: 保存运行过程修改的配置
        if: ${{ (success() && inputs.COMMIT_CHANGE) || inputs.FORCE_COMMIT }} # 这一步只会在前一步成功时执行
        env:
          # 这个 token 不需要配置，默认自带的
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "===== git 配置 ====="
          git config --global user.email "actions@github.com"
          git config --global user.name "github_action"
          git config --global pull.rebase true
          # 为了让 `**` 在Git命令中递归地工作, 需要在你的Git配置中设置 core.globstar 为 true
          git config --global core.globstar true

          git pull
          echo "===== 提交改动 ====="
          git status
          # # 添加所有的配置文件改动
          # git add **/*.ini
          # git add **/*.json
          git add .
          # 无改动不报错
          git diff --cached --exit-code || git commit -m "[UPD][${{ inputs.APP }}]: commit githubaction change"
          git push origin master
