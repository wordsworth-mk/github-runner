name: 22. 📦 打包发布

on:
  workflow_dispatch:
    inputs:
      DO_RELEASE:
        description: "是否创建标签及发行版"
        type: boolean
        required: false
        default: false

      APP_DIR:
        description: "打包的 app 名称"
        type: choice
        required: false
        default: "apps/baidu2douyin"
        options:
          - "all"
          - "apps/baidu2douyin"
          - "apps/test_app"
          - "tools/get_cookies.py"
          - "tools/launch_browser.py"

  workflow_call:
    inputs:
      DO_RELEASE:
        description: "是否创建标签及发行版"
        type: boolean
        required: false
        default: false

    secrets:
      MYPY_ACCESS_TOKEN:
        required: false

env:
  PYTHON_VERSION: 3.11
  APP_BASE_PATH: mypy/mypy/apps
  BUILD_TOOL: mypy/mypy/build/build.sh
  ENV_INIT_SCRIPT: mypy/env_init.sh
  # 打包后的 APP 可执行文件的存放路径
  PKG_ZIP_PATH: mypy/mypy/build/_pkg.zip
  BUILD_PKG_PATH: mypy/mypy/build/_pkg/
  CHANGEL_LOG_PATH: mypy/mypy/CHANGELOG.md

jobs:
  package:
    name: 打包
    runs-on: windows-latest

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        # 访问仓库用到的 Personal access token
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python

      - name: 设置 Python ${{ env.PYTHON_VERSION }} 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 缓存 pip 依赖
        uses: actions/cache@v4.2.2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('mypy/requirements.txt') }}

      # - name: 安装依赖程序
      #   continue-on-error: true
      #   uses: ConorMacBride/install-package@v1.1.0
      #   with:
      #     apt: ${{ inputs.DEPENDENT_BINARY }}
      #     choco: ${{ inputs.DEPENDENT_BINARY }}

      # - name: 安装字体
      #   run: |
      #     bash mypy/mypy/build/install_font.sh ${{ env.FONT_DIR }}

      - name: 初始化运行环境
        run: |
          bash ${{ env.ENV_INIT_SCRIPT }}
        env:
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
        # windows 版支持用 gitbash 执行命令
        shell: bash

      - name: 打包
        run: |
          # 指定应用打包
          # all 表示全部进行打包
          if [[ -n "${{ inputs.APP_DIR }}" && "${{inputs.APP_DIR}}" != "all" ]]; then
            bash ${{ env.BUILD_TOOL }} mypy/mypy/${{ inputs.APP_DIR }}
          else
            for app in $(ls -d ${{ env.APP_BASE_PATH }}/*/); do
              bash ${{ env.BUILD_TOOL }} $app
            done
          fi

        env:
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
        shell: bash

      - name: 压缩打包产物
        uses: vimtor/action-zip@v1.2
        with:
          files: ${{ env.BUILD_PKG_PATH }}
          dest: ${{ env.PKG_ZIP_PATH }}

      - name: 设置时区
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: 获取当前日期
        id: date
        run: |
          echo $(date +'%Y%m%d-%H%M%S')
          echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        shell: bash

      # 这个版本不支持给外部仓库创建发行版
      # - name: 上传 Release
      #   id: upload-release-asset
      #   if: ${{ inputs.DO_RELEASE }}
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ github.workspace }}/${{ env.PKG_ZIP_PATH }}
      #     asset_name: pkg.zip
      #     asset_content_type: application/zip

      # https://github.com/softprops/action-gh-release
      - name: 创建 Github 发行版
        id: create_release
        if: ${{ inputs.DO_RELEASE }}
        uses: softprops/action-gh-release@v2.0.6
        env:
          GITHUB_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}-${{ steps.date.outputs.date }}
          name: release-${{ github.ref_name }}-${{ steps.date.outputs.date }}
          body_path: ${{ env.CHANGEL_LOG_PATH }}
          files: |
            ${{ github.workspace }}/${{ env.PKG_ZIP_PATH }}
          draft: false
          prerelease: false
          repository: M-Kepler/Python

      # 当你上传成功后，后续的流程就可以下载这些文件来使用（可以在流水线下载）
      # Github actions Artifact 可以用来存储 action 产物
      - name: 上传 Artifact
        if: ${{ ! inputs.DO_RELEASE }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.date.outputs.date }}-Build
          # compression-level: 9 # maximum compression
          path: |
            ${{ env.PKG_ZIP_PATH }}

  update_changelog:
    name: 更新 CHANGELOG.md
    runs-on: ubuntu-latest
    if: ${{ inputs.DO_RELEASE }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        # 访问仓库用到的 Personal access token
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python

      - name: 获取当前日期
        id: date
        run: |
          echo $(date +'%Y%m%d-%H%M%S')
          echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 更新 CHANGELLOG
        continue-on-error: true
        if: ${{ inputs.DO_RELEASE }}
        uses: saadmk11/changelog-ci@v1.1.2
        with:
          release_version: ${{ github.ref_name }}-${{ steps.date.outputs.date }}
          github_token: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 获取 Changelog 输出
        continue-on-error: true
        run: |
          echo "${{ steps.changelog-ci.outputs.changelog }}"
          # $GITHUB_STEP_SUMMARY 只有等这个 job 执行完了才会输出出来
          echo "${{ steps.changelog-ci.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
