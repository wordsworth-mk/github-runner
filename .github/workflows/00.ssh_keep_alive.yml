# 默认工作路径是在 $GITHUB_WORKSPACE 路径下 即 /home/runner/work/github-runner/github-runner
# 默认是 docker 组下的 runner 用户
# https://zhuanlan.zhihu.com/p/387389708?utm_id=0
# https://github.com/marketplace/actions/debugging-with-tmate
# https://github.com/marketplace/actions/debugging-with-ssh

name: 00. 🍉 ssh_keep_alive

on:
  workflow_dispatch:
    inputs:
      SYSTEM:
        type: choice
        description: "系统"
        required: false
        default: ubuntu-latest
        options:
          - windows-latest
          - ubuntu-latest

      SETUP_KIND:
        type: boolean
        description: "安装 kind"
        required: false
        default: false

      SSH_WITH_VSCODE:
        type: choice
        description: "true 则只开启 SSH, false 则开启 vscode"
        required: false
        default: "true"
        options:
          - "true"
          - "false"

      FREE_DISK:
        type: boolean
        description: "释放磁盘空间"
        required: false
        default: false

      PYTHON_VERSION:
        type: string
        description: "python 版本"
        default: "3.10"

  # # 定时执行
  # schedule:
  #   # 代表国际标准时间，实际北京时间需要 +8 小时
  #   - cron: "30 01 * * *"
  #   - cron: "30 07 * * *"

  # 该事件可以通过 API 触发
  repository_dispatch:
    types:
      - ssh_keep_alive

env:
  FONT_DIR: mypy/mypy/assets/font
  ENV_INIT_SCRIPT: mypy/env_init.sh
  DEPENDENT_BINARY: "ffmpeg libreoffice poppler-utils wkhtmltopdf"
  ENV_IN_GITHUBACTION: true

jobs:
  start_ssh:
    # NOTICE: 注意这里要用单引号
    runs-on: ${{ inputs.SYSTEM || 'ubuntu-latest' }}
    steps:
      - name: 释放磁盘空间
        # runner.os == 'Linux' / 'Windows' 要用单引号
        if: ${{ inputs.FREE_DISK && runner.os == 'Linux' }}
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: 清理磁盘
        if: ${{ inputs.FREE_DISK && runner.os == 'Linux' }}
        continue-on-error: true # 即使失败了也继续后续流程
        run: |
          echo "================================="
          echo "-----> 磁盘清理前 <-----"
          df -h
          echo "================================="

          docker rmi `docker images -q` > /dev/null 2>&1 || true
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php > /dev/null 2>&1
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* > /dev/null 2>&1 || true
          sudo -E apt-get -qq update > /dev/null 2>&1
          sudo -E apt-get -qq autoremove --purge > /dev/null 2>&1
          sudo -E apt-get -qq clean > /dev/null 2>&1

          # sudo find /opt/hostedtoolcache/* -maxdepth 1 -type d ! -name "Python" -exec rm -rf {} \; > /dev/null 2>&1
          # sudo -rf /usr/local/.ghcup > /dev/null 2>&1
          sudo rm -rf /opt/hostedtoolcache/CodeQL > /dev/null 2>&1
          sudo rm -rf /usr/share/swift > /dev/null 2>&1

          echo "================================="
          echo "-----> 磁盘清理后 <-----"
          df -h
          echo "================================="

      - name: 设置时区
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: 配置 SSH key
        # https://stackoverflow.com/questions/75578151/how-do-i-clone-a-repo-in-b-repo-github-actions-if-two-repo-is-in-same-organizati
        # NOTICE: 也可以手动在 github actions 里拉取，不过要用 https 协议，而且提交的时候需要进行账密认证
        # 而通过以下方式这不需要账密认证
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: "github.com" # ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)

      - name: 配置 git 账号
        run: |
          git config --global user.name "actions-user"
          git config --global user.email "actions-user@github.com"
          git config --global --list

      - name: 设置运行环境配置
        continue-on-error: true
        run: |
          git clone git@github.com:M-Kepler/dotfiles ~/dotfiles
          cd ~/dotfiles
          bash run.sh
          if [ "${{ inputs.SETUP_KIND }}" = "true" ]; then
            echo "ENABLE_K8S_TOOL=true" >> ~/.bashrc
            echo "ENABLE_K8S_TOOL=true" >> ~/.zshrc
          fi

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: 缓存 pip 依赖
        # [关于 setup-python 缓存时没有把二进制一起缓存下来的问题](https://github.com/actions/setup-python/issues/330)
        continue-on-error: true
        uses: actions/cache@v4.2.2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('mypy/requirements.txt') }}

      - name: 缓存 apt 包
        if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ${{ env.DEPENDENT_BINARY }} # 要安装的软件包的空格分隔列表
          version: 1.0 # 要加载的缓存版本

      - name: 安装依赖程序
        continue-on-error: true
        uses: ConorMacBride/install-package@v1.1.0
        with:
          apt: ${{ env.DEPENDENT_BINARY }}
          choco: ${{ env.DEPENDENT_BINARY }}

      - name: 拉取 Python 代码 # 会把代码克隆到 $GITHUB_WORKSPACE 下
        uses: actions/checkout@v4
        env:
          MYPY_ACCESS_TOKEN: ${{ secrets.MYPY_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.MYPY_ACCESS_TOKEN }}
          repository: M-Kepler/Python

      - name: 安装字体
        if: ${{ runner.os == 'Linux' }}
        run: |
          bash mypy/mypy/build/install_font.sh ${{ env.FONT_DIR }}

      - name: 初始化运行环境
        run: |
          bash ${{ env.ENV_INIT_SCRIPT }}
        # windows 版支持用 gitbash 执行命令
        shell: bash

      # 在流水线执行脚本创建的文件夹都是 root 权限，而通过 action-debug 进入环境时 docker:runner 权限
      # 会导致无法操作这些文件或目录, 所以还是进入 ssh 后再手动安装第三方服务吧
      # - name: 安装第三方服务
      #   if: ${{ runner.os == 'Linux' }}
      #   continue-on-error: true
      #   run: |
      #     bash mypy/mypy/3party/init.sh

      - name: 创建软链
        continue-on-error: true
        run: |
          ln -s $GITHUB_WORKSPACE ~/workspace

          # 初始化 mypy 环境
          echo "echo 'python-mypy init' && cd $GITHUB_WORKSPACE/mypy && bash env_init.sh" > ~/mypy-init.sh

      ##################################################
      # 安装配置 kind 集群
      ##################################################
      - name: 拉取 docker-compose
        if: ${{ inputs.SETUP_KIND }}
        run: |
          git clone git@github.com:M-Kepler/docker-compose
          ls -al ./docker-compose/

      - name: 创建 k8s kind 集群
        if: ${{ inputs.SETUP_KIND && runner.os == 'Linux' }}
        continue-on-error: true
        uses: helm/kind-action@v1.12.0
        with:
          # 注意: 即使把 docker-compose clone 到 ~ 下也无法访问到
          # 除非，你先 clone 到 $HOME 下，然后再进入终端手动启动
          config: ./docker-compose/00.kind/kind-3nodes.yaml
          cluster_name: test

      ##################################################
      # 内网穿透
      ##################################################
      # - uses: fawazahmed0/action-debug@main
      - name: 创建退出 ssh 脚本
        run: |
          # 一键退出
          echo "touch $GITHUB_WORKSPACE/continue && echo '即将退出 github action 服务器'" > ~/quit-ssh
          chmod a+x ~/quit-ssh

      - uses: wordsworth-mk/action-debug@main
        continue-on-error: true # 即使失败了也继续后续流程
        with:
          credentials: "1:1"
          loop_wait: ${{ inputs.SSH_WITH_VSCODE }} # 是否在这里死循环等待退出

      - name: 通过 vscode 连接到 github action
        if: ${{ inputs.SSH_WITH_VSCODE == 'false' }}
        uses: wordsworth-mk/action-debug-vscode@main
